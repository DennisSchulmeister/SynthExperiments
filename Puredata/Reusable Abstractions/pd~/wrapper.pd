#N canvas 0 49 1920 1009 12;
#X obj -30 -30 preset_hub k12 1 %hidden%;
#X obj 0 -110 cnv 15 460 250 empty empty empty 20 12 0 14 #f5f5f5 #404040
0;
#X obj 0 -130 cnv 15 460 30 empty empty Wrapper\ for\ PD\ Subprocesses
10 12 0 14 #e0e0e0 #404040 0;
#X text 10 -100 This is a wrapper patch for sub-processes started with
the [pd~] object. The problem is \, that [pd~] has totally different
semantics than [pd] or calling external abstractions in the same process
with [./file]., f 62;
#X text 10 -20 The biggest problem is \, that you cannot pass \\$-arguments
to sub-processes \, which is why this wrapper exists. Instead of directly
starting your .pd file with [pd~] \, start this wrapper and send it
an init message like so:, f 62;
#X text 20 60 [init ./your-pd-file.pd xyz abc 123(;
#X text 10 90 The wrapper will then use dynamic patching to instantiate
the pd file as a custom abstraction \, passing the \\$-arguments.,
f 62;
#N canvas 0 49 1920 1009 \$0-subcanvas 0;
#X restore 500 0 pd \$0-subcanvas;
#X obj 530 419 list trim;
#X msg 860 390 clear;
#X text 910 390 1) Clear sub-canvas;
#X text 700 390 2) Insert object;
#X obj 500 280 r init;
#X obj 500 100 loadbang;
#X text 500 -20 ==== Subcanvas for dynamic patching ====;
#X text 500 80 ==== Signal parent that we are ready ====;
#X text 500 260 ==== Put custom object in subcanvas ====;
#X obj 500 190 stdout -cr -f;
#X msg 500 160 PD_READY 1;
#X obj 530 450 s pd-\$0-subcanvas;
#X obj 500 130 bng 20 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000 1;
#X obj 530 390 list prepend obj 10 10;
#X obj 530 360 trigger a b;
#X obj 500 330 trigger b a;
#X text 510 310 ---- Add object to canvas ----;
#X text 510 500 ---- Toggle DSP to enable the object ----;
#X msg 500 520 \; pd dsp 0 \; pd dsp 1 \; pd-\$0-subcanvas loadbang
;
#X connect 8 0 19 0;
#X connect 9 0 19 0;
#X connect 12 0 23 0;
#X connect 13 0 20 0;
#X connect 18 0 17 0;
#X connect 20 0 18 0;
#X connect 21 0 8 0;
#X connect 22 0 21 0;
#X connect 22 1 9 0;
#X connect 23 0 26 0;
#X connect 23 1 22 0;
